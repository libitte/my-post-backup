


== 認証と認可

認証はサイトのユーザーを識別することであり、認可はそのユーザーが実行可能な操作を管理することです

認証 ... サイトのユーザーを識別すること
認可 ... そのユーザーが実行可能な操作を管理すること

権限付与とかを例に取ってみると、
付与のためにそのユーザーを識別するのが認証、
そして権限付与するのが認可
ということになるのだと思います。


認証されてから認可が行われる、ということなのだと思います。



== 初めての Ruby を読んだ

初めての Ruby を読みました。
良書でした。
この本は他の言語を使ったことがある人が Ruby の言語仕様をざっとキャッチアップするのに最適な本な気がします。

自分は本を読んだ後に書かないと知識が残留しない方なので、
自分忘備録として個人的に便利だったことを箇条書きでメモしておきます。

2章 配列とハッシュ

添字代入について

配列 a に対して添字代入は下記のような挙動となります。

[ruby]
irb(main):001:0> a = [1, 2]
=> [1, 2]
irb(main):002:0> a[0] = 3
=> 3
irb(main):003:0> a
=> [3, 2]
irb(main):004:0> a[4]= "4"
=> "4"
irb(main):005:0> a
=> [3, 2, nil, nil, "4"]
irb(main):006:0> a[0, 3] = 'a', 'b', 'c'
=> ["a", "b", "c"]
irb(main):007:0> a
=> ["a", "b", "c", nil, "4"]
irb(main):008:0> a[0..2] = "A"
=> "A"
irb(main):009:0> a
=> ["A", nil, "4"]
[/ruby]

a[0, 3] = 'a', 'b', 'c'

^^ index: 0 から 3 要素以外はデータが消えてしまいます。

添字代入の裏側

添字参照式が返す値は、配列が保持しているオブジェクトの参照
実は添字代入式と添字参照式はまったく別物。

添字代入式 ... Array#[]=メソッドの呼び出し
添字参照式 ... Array#[]メソッドの呼び出し

よって下記のような現象が発生する。

[ruby]

irb(main):010:0> a = %w[a b]
=> ["a", "b"]
irb(main):011:0> a
=> ["a", "b"]
irb(main):012:0> a[-3]
=> nil
irb(main):013:0> a[-3] = 1
IndexError: index -3 too small for array; minimum: -2
	from (irb):13:in `[]='
	from (irb):13
	from /usr/bin/irb:12:in `<main>'
[/ruby]



3章 数値


ビット演算

ビットシフトは下記のように行うことができます。

右にシフト

[ruby]
irb(main):021:0> 1 << 0
=> 1
irb(main):022:0> 1 << 1
=> 2
irb(main):023:0> 1 << 2
=> 4
irb(main):024:0> 1 << 3
=> 8
irb(main):025:0> 1 << 4
=> 16
[/ruby]


左にシフト

[ruby]
irb(main):026:0> a = 1 << 4
=> 16
irb(main):028:0> a
=> 16
irb(main):029:0> a >> 1
=> 8
[/ruby]



4章 文字列

== ヒアドキュメント

EOS が区切り文字で % のあとに送りたい変数をがかけます。

[ruby]
count = database_connector.get_int(<<"EOS" % author.id)
  SELECT COUNT(*)
  FROM book
  WHERE book.author_id = %d
EOS

[/ruby]


== シンボル

シンボルは唯一性と軽量性が利点。

文字列の場合

[ruby]
irb(main):039:0* str1 = "ruby"
=> "ruby"
irb(main):040:0> str2 = "ruby"
=> "ruby"
irb(main):041:0> str1 == str2
=> true
irb(main):042:0> str1.equal? str2
=> false
[/ruby]


シンボルの場合

シンボルは内容が同値であれば必ず同一のオブジェクトとなる。
特定の内容を表すシンボルオブジェクトはプロセス内で唯一となる。

[ruby]
irb(main):043:0> symbol1 = :ruby
=> :ruby
irb(main):044:0> symbol2 = :ruby
=> :ruby
irb(main):045:0> symbol1 == symbol2
=> true
irb(main):046:0> symbol1.equal? symbol2
=> true
[/ruby]

オブジェクトとして同一かどうかだけを調べれば良いので、
シンボル同士は文字列同士に比べて高速に同値性を判定できる。

また、内容に対する唯一性を維持しなければならないため、
シンボルオブジェクトは文字列をは異なり変更不能(immutable)。


5章 入出力

6章 変数と式

参照

入力のオブジェクトを破壊せずにオブジェクトを加工したいときには `dup` を使って複製してから行う。

[ruby]
def describe(name)
  name[2] = ?p
end
[/ruby]

ではなく、

[ruby]
def describe(name)
  name = name.dup
  name[2] = ?p
end
[/ruby]


という感じでオブジェクトを複製できます。


== 多重代入

複数の式を平行して代入することができる。

a, b, c = 1, 2, 3

内部的には

a = 1; b = 2; c = 3

をしているとおもいきやそうではないらしい。

上記とは評価順序が異なり、
代入されようとしている値は、代入が実際に行われるよりも先に完全に計算される。
よって、

a, b = b, a

なども、元々も a 及び b の値がそれぞれ b 及び a に代入され、値の交換が実現できる。

irb(main):062:0> a, b, c = 1, 2, 3
=> [1, 2, 3]
irb(main):065:0> a, b = b, a
=> [2, 1]
irb(main):066:0> a
=> 2
irb(main):067:0> b
=> 1


== 多値と配列展開

多重代入は多値をいっぺんに代入する記法です。
`*` とい修飾を使うことで多値を受け取ることができる。

irb(main):068:0> a, *b = 1, 2, 3, 4, 5
=> [1, 2, 3, 4, 5]
irb(main):069:0> b
=> [2, 3, 4, 5]
irb(main):070:0> a
=> 1

また、`*` が代入の右辺に出現すると、逆に配列を多値に展開してくれる。


irb(main):071:0> array = [1, 2, 3]
=> [1, 2, 3]
irb(main):072:0> a, b, c = *array
=> [1, 2, 3]

irb(main):078:0> a, b, *c, d = *array, 3, 4, 5
=> [1, 2, 3, 3, 4, 5]
irb(main):079:0> a
=> 1
irb(main):080:0> b
=> 2
irb(main):081:0> c
=> [3, 3, 4]
irb(main):082:0> d
=> 5




7章 メソッド

レシーバの省略

擬似変数selfは常に「現在のレシーバ」を指している。
private メソッドは常にレシーバ省略形式で呼び出さなければならない。

Rubyプログラムにおいては、メソッド内外にかぎらずいかなる箇所においてもselfとなるべきオブジェクトが存在する。

irb(main):083:0> self
=> main

ブロック付きメソッドの定義

yield 式は、メソッド内から呼び出し側のブロックをコールバックする構文。


irb(main):092:0> def foo_bar_baz
irb(main):093:1> yield "foo"
irb(main):094:1> yield "bar"
irb(main):095:1> yield "baz"
irb(main):096:1> end
=> nil
irb(main):097:0> foo_bar_baz do |item|
irb(main):098:1* puts item
irb(main):099:1> end
foo
bar
baz
=> nil



8章 オブジェクトとクラス

== 特異メソッドと特異クラス

Rubyには特定のオブジェクトのためだけのメソッドやクラス、という概念があり、
これらのことを特異メソッド、特異クラスと呼ぶ。

== 特異クラス
ある特定のインスタンスのためだけにあるクラス。

CENTRAL_REPOSITORY = Object.new

class << CENTRAL_REPOSITORY
  def register(target)
    ...
  end

  def unregister(target)
    ...
  end
end


== 特異メソッド

概念上はクラスではなく、インスタンスに直接所属しているメソッド。
実装上は、特異メソッドもクラスに属していて、特異クラスのインスタンスメソッドという位置づけ。

irb(main):100:0> message = "Hello"
=> "Hello"
irb(main):101:0> def message.build_greeting(target)
irb(main):102:1> "#{self}, #{target}"
irb(main):103:1> end
=> nil
irb(main):104:0> message.build_greeting("world")
=> "Hello, world"
irb(main):105:0> message2 = "Hello"
=> "Hello"
irb(main):106:0> message2.build_greeting("world")
NoMethodError: undefined method `build_greeting' for "Hello":String
	from (irb):106
	from /usr/bin/irb:12:in `<main>'






== Perl 及び Ruby におけるMixin

## Perl

Perl は言語として多重継承が可能です。
例えば `Cafe` クラスが `Shop` クラスを継承しつつ、 `Spot` のメソッドも使いたい、
という場合には下記のように書くことができます。

```perl
package Cafe
use strinct;
use warnings;
use parent qw(Spot Shop);

...

1;
```

[`NEXT`](https://metacpan.org/pod/NEXT)を使えば同名メソッドの呼び出し順の問題を
ある程度回避できるものの、やはり多重継承の持つ問題をすべて解消するものではありません。

というわけで `Mixin` を利用して多重継承の便利さを享受しようと考えるわけですが、
これを Perl で行うためには `Exporter` を使うのかなと思います。


```perl
package Shop;
use strict;
use warnings;
our @EXPORT = qw(menu);

sub menu {
    my $self = shift;
    return {
        coffee => 300,
        bread => 300,
    };
}

1;
```

```perl
package Spot;
use strinct;
use warnings;
our @EXPORT = qw(location);

sub location {
    my $self = shift;
    return 'shibuya';
}

1;
```

```perl
package Cafe;
use strinct;
use warnings;
use Shop;
use Spot;

sub new {
    my ($class, $name) = @_;
    bless { name => $name }, $class;
}

1;
```

`Cafe` クラスはどのクラスも継承せず、代わりに use することで `Shop` 及び `Spot` の持つメソッドを
import することで `Cafe` のインスタンスメソッドとして利用することが可能になっています。

## Ruby

Ruby における Mixin はクラスがモジュールを `include` というものを使って継承することで実現しています。

`Comparable` は大小比較機能を付与するモジュールです。
これを `include` する例を下記に載せます。

```ruby
class Foo
  include Comparable
  def <=>(rhs)
    #something good codes
  end
end
```

`Foo` から `Comparable` のメソッドを利用できます。

```ruby
foo1 = Foo.new
foo2 = Foo.new
food1 <= foo2  # Comparable が提供するメソッド
```

## Ref.

* [なんで多重継承はそんなに嫌われるのか？ ちょっくら分析してみるか](http://d.hatena.ne.jp/m-hiyama/20080304/1204615775)
* [Object-Oriented Programming with Perl Vol.29 by Tatsuhiko Miyagawa <miyagawa@cpan.org>](http://bulknews.net/lib/mailmag/29/mag.txt)
* O'Reilly Japan - 初めてのRuby


== pr レビューについて思うこと

pr レビューって難しいですよね。

* 仕様がそもそも動見ればいいかわからないとそもそもよくわかんないし、
* ばかなこと質問的にコメントするとそういうの残っちゃって困るし、
* そういうこと書くと相手も返答しなくちゃいけなくて大変だし、
* 考慮不足で指摘すると返り討ちに合うし、
* 細かすぎること指摘しても相手は嫌な気分になるだけだし、
* 大きすぎる修正はやっぱり相手辛いし、
* 解決方法が思いついていない状態で指摘するとやっぱり相手に取っては負担だし、
* それで一生懸命調べてくれたりしていたとしても結局その問題には解決策がないねってなることもあるし、

なんだか難しいことがたくさんありすぎて悩みます。

でもまあ、こんなことを考えながらもやっぱりprレビューすると人のコードを読むので、

* 自分の担当案件以外のことについて仕様に詳しく慣れたり、
* 実装についても考えるきっかけが与えられるので、ちょっとだけ実装した気になったり、
*「？」と思うことを調べて「ほほー」と新しい知識を得るきっかけになったり、

いいこともたくさんあります。

そんなこんなで僕としてはprレビューはやっぱ積極的にやったほうがいいなと思うのです。
prレビューをあたりまえだよね、って認めてくれるチームの雰囲気とか会社の雰囲気があると幸せです。



== 自分の分野を広げるために分野を選択し継続的に勉強していきたい

最近、何か自分の得意分野専門分野を作りたいと考えている。
そのためには一定期間以上特定の分野に集中する必要があると感じている。

しかし自分はその "分野の選択及びそれに対する一定期間以上の集中を継続しものにする" という行為を失敗しがちなのである。

僕の今までを振り返ってみる。

僕は今まで自分はエンジニアとして2年半ほどやって来たわけだが、
ふつうにWebサービスの開発をしてきました、というくらいで別段誰にもまけない得意分野とかがあるわけではない。
確かに大量のトラフィックのあるサービスの開発、運用を行ってきたので
* スケーラブルなテーブル設計
* きちんとしたトランザクション管理を実現するコードの書き方
* 障害対応
* ユーザーサポート対応
などWeb開発、運用というコンテキストものはひと通り行ってきたし、

3d画像を扱うサービスに携わってきた関係で
画像の加工とか、CDNキャッシュ周りなどは人よりも少し詳しいとかはある。

しかし、それくらいである。

認証の専門家です、とか
セキュリティの鬼です、とか
Dev Ops なら任せろ、とか
xx 言語のスペシャリストです、とか
UI/UX設計含めたクライアントサイドプログラミングは任せろ、とか
そういうのは残念ながら現状無い。

Web エンジニアだが、モバイル API の開発も最近仕事で作り始めたばかりだし、
スキル的には Perlを2年半、JavaScriptを1年半、Ruby, Ruby on Rails を始めて1ヶ月とかそんな感じである。

ユーザーのために何か作るのは楽しいが、これだけではまずいかもな、と感じている今日このごろなのである。


そんなわけで何か手を出してみようと考えている。
そのためには選択をし、それに一定期間集中する必要がある。

ネイティブアプリ、関数型言語、ローレベルプログラミング、、
魅力的な興味津々な分野はたくさんあれどどれも重たいのでどんな分野を選択し集中するべきか。。

自分は選択した後に集中を継続してものにすることを失敗しがちなのである。
妥当な理由を持った選択及び、それからそれらに対する集中の継続をしたい。

ゆっくりでいいから、一歩ずつ着実に。



スレッドとプロセスの違い (箇条書きメモ)
==================================================

スレッドのプロセスがいまいちよくわからなくなったのでさくっと調べたものを箇条書きでメモしておきます。
&nbsp;

### プロセス
* プロセスはプログラムの実行単位のこと
  * リソースを共有するには別プロセスのリソースをコピーしてこなければならない。
  * プロセスが実行するプログラム内の変数は各プロセスごとに固有の領域が物理メモリ上に確保され、仮想メモリに割り当てられる
&nbsp;

### スレッド
* スレッドはプロセスがforkした並列動作可能な処理の単位
  * プロセスがforkし生成される実行単位
    * 1プロセスから並列でスレッドを起動することができる
    * これらはリソースを共有することができる
  * 実はプロセスもスレッドの一種

&nbsp;

### Ref.

* [プロセスとスレッドの違い](http://www.imokuri123.com/blog/2013/12/difference-between-process-and-thread.html)
* [Linux Performance and Tuning Guidelines](http://www.redbooks.ibm.com/redpapers/pdfs/redp4285.pdf)
* [意味の違いがわかる？ タスクとプロセスとスレッド](http://ascii.jp/elem/000/000/653/653041/)

Setup Octopress
==================================================

まだ実導入していないのですがとりあえずメモしておきます。

1- Octopress を取ってくる

```bash
git clone git://github.com/imathis/octopress.git octopress
cd octopress
```

2- rbenv 経由で使用したいバージョンのrubyをインストールし、localにセットした上で、bundler経由で依存gemのインストール

```bash
rbenv install 2.1.3
rbenv local 2.1.3
bundle install
```

3- デフォルトの Octopress テーマをインストール

```bash
$ bundle exec rake install
## Copying classic theme into ./source and ./sass
mkdir -p source
cp -r .themes/classic/source/. source
mkdir -p sass
cp -r .themes/classic/sass/. sass
mkdir -p source/_posts
mkdir -p public
```

### Ref.

* http://octopress.org/docs/setup/
